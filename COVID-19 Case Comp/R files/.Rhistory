b3 = 50
K = 6
J = 5
sim_data = function(n, B) {
means = rep(0, 9)
sds = rep(0, 9)
vfs = rep(0, 9)
rates = rep(0, 9)
sigmas = rep(c(1, 10, 100), 3)
j = 1
for (s in sigmas) {
results = rwm(n, B, s)
rwm_obs = results$observations
rwm_acc_rate = results$rate
vf = varfact(rwm_obs, n)
se = sqrt(var(rwm_obs) / n * vf)
avg = mean(rwm_obs)
means[j] = avg
vfs[j] = vf
sds[j] = se
rates[j] = rwm_acc_rate
j = j + 1
}
return(data.frame(sigmas, means, sds, vfs, rates))
}
sim_data = function(n, B) {
means = rep(0, 9)
sds = rep(0, 9)
vfs = rep(0, 9)
rates = rep(0, 9)
sigmas = rep(c(1, 10, 100), 3)
j = 1
for (s in sigmas) {
results = rwm(n, B, s)
rwm_obs = results$observations
rwm_acc_rate = results$rate
vf = varfact(rwm_obs, n)
se = sqrt(var(rwm_obs) / n * vf)
avg = mean(rwm_obs)
means[j] = avg
vfs[j] = vf
sds[j] = se
rates[j] = rwm_acc_rate
j = j + 1
}
return(data.frame(sigmas, means, sds, vfs, rates))
}
# Random Walk Metropolis
rwm = function(n, B, sigma) {
mu = mean(Ydye)
w = mean(apply(Ydye,1, sd, na.rm = TRUE))^2
v = sd(rowMeans(Ydye))^2
params = rowMeans(Ydye)
x = c(mu, w, v, params)
obs = rep(0, n)
for (i in 1:B) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
x = y
}
}
}
accp_rate = 0
for (i in  1: n) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
accp_rate = accp_rate + 1
x = y
}
}
obs[i] = x[2] / x[3]
}
results = list("rate" = accp_rate/n, "observations" = obs)
return(results)
}
# log joint function
log_joint = function(params) {
mu = params[1]
w = params[2]
v = params[3]
theta = params[4:9]
theta_matrix = matrix(theta, ncol=J, nrow=K, byrow=F)
# log everything
# densities and components of joint distribution
dens1 = -b1/v + (-a1 - 1)*log(v)
dens2 = -b2/w + (-a2 - 1)*log(w)
dens3 = -(mu - a3)^2 / (2*b3)
# breakup likelihood into components
comp1 = -sum((theta - mu)^2)/(2*v)
comp2 = -sum((Ydye - theta_matrix)^2) / (2*w)
likelihood = (-K/2)*log(v) + (-0.5*K*J)*log(w) + comp1 + comp2
return(dens1 + dens2 + dens3 + likelihood)
}
n = 50000 # sample size
B = 1000 # burnout
data = sim_data(n, B)
data
a1 = 6
a2 = 6
a3 = 1600
b1 = 6
b2 = 6
b3 = 1600
K = 6
J = 5
ggplot(data=data, aes(x = sigmas, y = means)) +
geom_point() +
geom_errorbar(aes(ymin=means-sds, ymax=means+sds), width=.2)
# varfact function used to obtain std errors
varfact = function(obs, n) {
eps = 0.05
cors = acf(obs, plot = F, lag.max = min(c(n, 100000)))$acf
cor_sum = 0
for (val in cors) {
cor_sum = cor_sum + val
if (val < eps) {
break
}
}
return(2*cor_sum - 1)
}
# log joint function
log_joint = function(params) {
mu = params[1]
w = params[2]
v = params[3]
theta = params[4:9]
theta_matrix = matrix(theta, ncol=J, nrow=K, byrow=F)
# log everything
# densities and components of joint distribution
dens1 = -b1/v + (-a1 - 1)*log(v)
dens2 = -b2/w + (-a2 - 1)*log(w)
dens3 = -(mu - a3)^2 / (2*b3)
# breakup likelihood into components
comp1 = -sum((theta - mu)^2)/(2*v)
comp2 = -sum((Ydye - theta_matrix)^2) / (2*w)
likelihood = (-K/2)*log(v) + (-0.5*K*J)*log(w) + comp1 + comp2
return(dens1 + dens2 + dens3 + likelihood)
}
sim_data = function(n, B) {
means = rep(0, 9)
sds = rep(0, 9)
vfs = rep(0, 9)
rates = rep(0, 9)
sigmas = rep(c(1, 10, 100), 3)
j = 1
for (s in sigmas) {
results = rwm(n, B, s)
rwm_obs = results$observations
rwm_acc_rate = results$rate
vf = varfact(rwm_obs, n)
se = sqrt(var(rwm_obs) / n * vf)
avg = mean(rwm_obs)
means[j] = avg
vfs[j] = vf
sds[j] = se
rates[j] = rwm_acc_rate
j = j + 1
}
return(data.frame(sigmas, means, sds, vfs, rates))
}
# Random Walk Metropolis
rwm = function(n, B, sigma) {
mu = mean(Ydye)
w = mean(apply(Ydye,1, sd, na.rm = TRUE))^2
v = sd(rowMeans(Ydye))^2
params = rowMeans(Ydye)
x = c(mu, w, v, params)
obs = rep(0, n)
for (i in 1:B) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
x = y
}
}
}
accp_rate = 0
for (i in  1: n) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
accp_rate = accp_rate + 1
x = y
}
}
obs[i] = x[2] / x[3]
}
results = list("rate" = accp_rate/n, "observations" = obs)
return(results)
}
n = 50000 # sample size
B = 1000 # burnout
data = sim_data(n, B)
data
ggplot(data=data, aes(x = sigmas, y = means)) +
geom_point() +
geom_errorbar(aes(ymin=means-sds, ymax=means+sds), width=.2)
# Random Walk Metropolis
rwm = function(n, B, sigma) {
mu = mean(Ydye)
w = mean(apply(Ydye,1, sd, na.rm = TRUE))^2
v = sd(rowMeans(Ydye))^2
params = rowMeans(Ydye)
x = c(mu, w, v, params)
obs = rep(0, n)
for (i in 1:B) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
x = y
}
}
}
accp_rate = 0
wlist = rep(0, n)
vlist = rep(0, n)
for (i in  1: n) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
accp_rate = accp_rate + 1
x = y
}
}
obs[i] = x[2] / x[3]
wlist[i] = x[2]
vlist[i] = x[3]
}
plot(wlist, vlist, type='l')
results = list("rate" = accp_rate/n, "observations" = obs)
return(results)
}
n = 50000 # sample size
B = 1000 # burnout
rwm(n, B, 10)
# Random Walk Metropolis
rwm = function(n, B, sigma) {
mu = mean(Ydye)
w = mean(apply(Ydye,1, sd, na.rm = TRUE))^2
v = sd(rowMeans(Ydye))^2
params = rowMeans(Ydye)
x = c(mu, w, v, params)
obs = rep(0, n)
for (i in 1:B) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
x = y
}
}
}
accp_rate = 0
wlist = rep(0, n)
vlist = rep(0, n)
for (i in  1: n) {
y = x + sigma*rnorm(5)
u = log(runif(1))
if (y[2] > 0 & y[3] > 0 ) {
if(u < log_joint(y) - log_joint(x)){
accp_rate = accp_rate + 1
x = y
}
}
obs[i] = x[2] / x[3]
wlist[i] = x[2]
vlist[i] = x[3]
}
plot(wlist, vlist, type='l', xlab = "W", ylab = "V")
results = list("rate" = accp_rate/n, "observations" = obs)
return(results)
}
rwm(n, B, 10)
n = 500 # sample size
B = 1000 # burnout
rwm(n, B, 10)
n = 1000 # sample size
B = 1000 # burnout
rwm(n, B, 10)
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE,
error = FALSE,
out.width = "100%",
fig.width = 10,
fig.height = 6.7,
fig.retina = 3,
cache = FALSE)
library(faraway)
uswages[1]
library(faraway)
library(mgcv)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
non_par_model = gam(formula = non_par_form, family = "guassian")
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
non_par_model = gam(formula = non_par_form, family = "guassian", data = uswages)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
non_par_model = gam(formula = non_par_form, family = "gamma", data = uswages)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
non_par_model = gam(wage ~ educ + s(exper), family = "gamma", data = uswages)
uswages$wage
uswages$educ
uswages$exper
uswages$smsa
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
non_par_model = gam(formula = non_par_form, family = "gamma", data = uswages)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
formula = wage ~ educ
non_par_model = gam(formula = formula, family = "gamma", data = uswages)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
formula = wage ~ educ
non_par_model = gam(formula = formula, family = "gaussian", data = uswages)
non_par_form = wage ~ s(educ) + s(exper) + s(smsa)
formula = wage ~ educ
non_par_model = gam(formula = non_par_form, family = "gaussian", data = uswages)
non_par_form = wage ~ s(exper) + s(smsa)
formula = wage ~ educ
non_par_model = gam(formula = non_par_form, family = "gaussian", data = uswages)
non_par_form = wage ~ s(educ) + s(smsa)
formula = wage ~ educ
non_par_model = gam(formula = non_par_form, family = "gaussian", data = uswages)
non_par_form = wage ~ s(educ) + s(exper)
formula = wage ~ educ
non_par_model = gam(formula = non_par_form, family = "gaussian", data = uswages)
non_par_form = wage ~ s(educ) + s(exper)
non_par_model = gam(formula = non_par_form, family = "gaussian", data = uswages)
summary(non_par_model)
# Change working directory
cwd = getwd()
wd = file.path(cwd, "COVID-19 Case Comp", "R files")
setwd(wd)
setwd("~/Documents/Experimentation/Covid/covid_case_comp/COVID-19 Case Comp/R files")
path = file.path("..", "Datasets", "Mobility Data", "2020_US_Region_Mobility_Report.csv")
mob_data = read.csv(path)
path = file.path("usdata.csv")
usdata = read.csv(path)
colnames(usdata)
colnames(mob_data)
colnames(mob_data)[6] = "state"
colnames(mob_data)
mob_data[6][1]
mob_data[1, 6]
mob_data[2, 6]
mob_data[50, 6]
mob_data[100, 6]
mob_data[200, 6]
mob_data[1, 6] == NA
mob_data[1, 6] == ""
library(dplyr)
mob_data = filter(mob_data, state != "")
mob_data$state = sapply(mob_data$state, function(x) {gsub("US-", "", x)})
mob_data[1, 6]
mob_data$date[1]
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata)
colnames(usd)
colnames(usdata)
head(usdata)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
head(usdata)
colnames(usdata)[1] = "date"
colnames(usdata)
colnames(mob_data)
mob_data = mob_data[, c(6, 8, 9, 10, 11, 12, 13, 14)]
colnames(mob_data)
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata)
colnames(usd)
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata, by = "state")
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata, by.x = "state")
colnames(usd)
str(usd$state)
str(usdata$state)
mob_data$state = as.factor(mob_data$state)
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata, by.x = "state")
mob_data$date[1]
str(mob_data$date)
str(usdata$date)
mob_data$date = as.Date(mob_data$date, format = "%Y-%m-%d")
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata)
mob_data[1, ]
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
usdata$date = strptime(usdata$date,format="%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
usdata$date = strptime(usdata$date,format="%Y-%m-%d")
usdata[1, ]
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
mob_data$date = as.Date(mob_data$date, format = "%d/%m/Y")
usdata[1, ]
usdata$date = strptime(usdata$date,format="%Y-%m-%d")
usdata[1, ]
mob_data[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
str(usdata$date)
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
mob_data$date = as.Date(mob_data$date, format = "%Y-%m-%d")
mob_data[1, ]
usdata$date = strptime(usdata$date,format="%d/%m/Y")
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
usdata$date = strptime(usdata$date,format="%d/%m/Y")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = False)
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = strptime(usdata$date,format="%d%mY")
usdata[1, ]
str(usdata$date)
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = strptime(usdata$date,format="%d/%m/%Y")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = strptime(usdata$date,format="%d%m%Y")
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = strptime(usdata$date,format="%m%d%Y")
usdata[1, ]
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
path = file.path("usdata.csv")
usdata = read.csv(path, stringsAsFactors = FALSE)
usdata = usdata[, c(2, 3, 7, 12, ncol(usdata))]
colnames(usdata)[1] = "date"
usdata[1, ]
str(usdata$date)
usdata$date = strptime(usdata$date,format="%m/%d/%Y")
usdata[1, ]
usdata$date = as.Date(usdata$date, format = "%Y-%m-%d")
usdata[1, ]
mob_data[1, ]
# now merge mob_data and usdata. Merge on state
usd = merge(mob_data, usdata)
colnames(usd)
head(usd)
write.csv(usd, file="usdata.csv")
